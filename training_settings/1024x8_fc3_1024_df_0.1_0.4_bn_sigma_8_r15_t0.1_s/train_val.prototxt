name: "FPNN"
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  data_param {
    source: "/home/yangyan/FPNN/ModelNet/ModelNet40_DF/lmdb_64_train"
    batch_size: 256 
    backend: LMDB
  }
}

layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  data_param {
    source: "/home/yangyan/FPNN/ModelNet/ModelNet40_DF/lmdb_64_test"
    batch_size: 128
    backend: LMDB
  }
}

layer {
  name: "transform_3d"
  type: "Transform3D"
  bottom: "data"
  bottom: "label"
  top: "distance_field_trans"
  top: "label_trans"
  transform_3d_param {
    min_rotation_x: -15
    max_rotation_x: 15
    min_rotation_y: -15
    max_rotation_y: 15
    min_rotation_z: 0
    max_rotation_z: 360

    min_scaling_x: 0.9
    max_scaling_x: 1.1
    min_scaling_y: 0.9
    max_scaling_y: 1.1
    min_scaling_z: 0.9
    max_scaling_z: 1.1

    min_translation_x: -6
    max_translation_x: 6
    min_translation_y: -6
    max_translation_y: 6
    min_translation_z: -6
    max_translation_z: 6

    num_transformations: 4
    pad_value: 100
  }
}

layer {
  name: "field_probing"
  type: "FieldProbing"
  bottom: "distance_field_trans"
  top: "distances"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  field_probing_param {
    num_sliding: 1
    padding: 0
    num_filter: 1024
    len_filter: 8
    min_span: 0.1 
    max_span: 0.4 
  }
}

layer {
  name: "gaussian"
  type: "Gaussian"
  bottom: "distances"
  top: "distances"
  gaussian_param {
    sigma: 8
  }
}

layer {
  name: "dp"
  type: "DotProduct"
  bottom: "distances"
  top: "dp"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  dot_product_param {
    weight_filler {
      type: "gaussian"
      std: 0.05
    }   
    bias_filler {
      type: "constant"
      value: 1
    }   
    share_weights: false
  }
}

layer {
  name: "bn_dp"
  type: "BatchNorm"
  bottom: "dp"
  top: "dp"
}

layer {
  name: "relu_dp"
  type: "ReLU"
  bottom: "dp"
  top: "dp"
}

layer {
  name: "fc0"
  type: "InnerProduct"
  bottom: "dp"
  top: "fc0"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1024
    weight_filler {
      type: "gaussian"
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "bn_fc0"
  type: "BatchNorm"
  bottom: "fc0"
  top: "fc0"
}
layer {
  name: "relu_fc0"
  type: "ReLU"
  bottom: "fc0"
  top: "fc0"
}
layer {
  name: "drop_fc0"
  type: "Dropout"
  bottom: "fc0"
  top: "fc0"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "fc1"
  type: "InnerProduct"
  bottom: "fc0"
  top: "fc1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1024
    weight_filler {
      type: "gaussian"
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "bn_fc1"
  type: "BatchNorm"
  bottom: "fc1"
  top: "fc1"
}
layer {
  name: "relu_fc1"
  type: "ReLU"
  bottom: "fc1"
  top: "fc1"
}
layer {
  name: "drop_fc1"
  type: "Dropout"
  bottom: "fc1"
  top: "fc1"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc2"
  type: "InnerProduct"
  bottom: "fc1"
  top: "fc2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1024
    weight_filler {
      type: "gaussian"
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "bn_fc2"
  type: "BatchNorm"
  bottom: "fc2"
  top: "fc2"
}
layer {
  name: "relu_fc2"
  type: "ReLU"
  bottom: "fc2"
  top: "fc2"
}
layer {
  name: "drop_fc2"
  type: "Dropout"
  bottom: "fc2"
  top: "fc2"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "fc3_loss"
  type: "InnerProduct"
  bottom: "fc2"
  top: "fc3_loss"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 40
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "fc3_loss"
  bottom: "label_trans"
  top: "accuracy"
  include {
    phase: TEST
  }
  accuracy_param {
    top_k: 1
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc3_loss"
  bottom: "label_trans"
  top: "loss"
}
